################################################################################
#                   checking correlation between PS_VC and other tests         #
################################################################################
rm(list = ls())
gc()
source("/Dedicated/jmichaelson-wdata/msmuhammad/msmuhammad-source.R")
fn = "/sdata/MRI/RPOE/2E_033/scan/metadata/2E_033_GNW_semanticMap_2023-04-07_12h53.06.459.log"
dat = read.table(fn,sep="\t",header=F,stringsAsFactors=F)
head(dat)
View(dat)
d1 = dat[grepl("EXP",dat[,2]),]
unique(dat$V2)
unique(dat$V2)
d1 = d1[grepl("New trial",d1[,3]),]
View(d1)
tmp <- read_rds("/wdata/msmuhammad/projects/tx-imputation/02_tx-imputation/imputed-tx/Brain_Anterior_cingulate_cortex_BA24/imputed-tx-of-Brain_Anterior_cingulate_cortex_BA24.RDS")
dim(tmp)
tmp <- read_rds("/wdata/msmuhammad/projects/tx-imputation/02_tx-imputation/imputed-tx-pcs-corrected/Brain_Anterior_cingulate_cortex_BA24.rds")
tmp <- read_rds("/wdata/msmuhammad/projects/tx-imputation/02_tx-imputation/imputed-tx-pcs-corrected/Brain_Hippocampus.rds")
################################################################################
#                   checking correlation between PS_VC and other tests         #
################################################################################
rm(list = ls())
gc()
source("/Dedicated/jmichaelson-wdata/msmuhammad/msmuhammad-source.R")
library(tuneR)
################################################################################
################################################################################
project.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/RPOE/language"
setwd(project.dir)
################################################################################
#  read the PS_VC task metadata
ps.vc.metadata.r <- read_csv("data/derivatives/PS_VC-task-metadata.csv")
ps.vc.metadata <- ps.vc.metadata.r %>%
mutate(start_in_sec = start_in_sec - ps.vc.metadata.r$start_in_sec[1],
end_in_sec = end_in_sec - ps.vc.metadata.r$start_in_sec[1]) %>%
select(task_num, word, start_in_sec, end_in_sec)
# keep participants of interest
participants.metadata <- read_csv("data/derivatives/PS_VC-participants-metadata.csv")
p.of.int <- participants.metadata %>%
filter(work_on == T) %>%
mutate(start = as.numeric(sub("^\\d{2}:(\\d{2}):\\d{2}$", "\\1", first_beep)),
duration_m = as.numeric(sub("^([^:]+).*", "\\1", duration)),
duration_s = as.numeric(sub("^\\d{2}:(\\d{2}):\\d{2}$", "\\1", duration)),
duration_in_sec = (60*duration_m)+duration_s) %>%
select(ID, starts_with("duration"), start, audio, video, `all tasks completed`)
################################################################################
# read tests data
nih.tb <- read_csv("data/derivatives/nih-tb_clean_111523.csv")
iq <- read_csv("data/derivatives/wisc-and-wais_clean_111523.csv")
################################################################################
# read response sound to task-4 faces1 of all participants
registerDoMC(cores = 1)
i = 1
# for(i in 1:nrow(p.of.int)) {
pid <- p.of.int$ID[i]
task <- readWave(paste0(project.dir, "/data/derivatives/PS-VC_participants-response/",
pid, "/", pid, "_task-4_faces1_30.mp3"))
# print(task)
# print(paste0("participant: ", pid, " has a record of: ", length(task@left)/task@samp.rate))
t <- data.frame(te_id = pid, value = as.numeric(task@left), sample = c(1:length(as.numeric(task@left))))
all.ps.vc <- t
all.ps.vc <- all.ps.vc %>%
pivot_wider(names_from = "sample", values_from = "value", id_cols = te_id)
View(all.ps.vc)
View(t)
View(t)
hist(t$value)
hist(t$value, breaks = 100)
hist(t$value, breaks = 1000)
length(t)
dim(t)
i
i=2
# for(i in 1:nrow(p.of.int)) {
pid <- p.of.int$ID[i]
task <- readWave(paste0(project.dir, "/data/derivatives/PS-VC_participants-response/",
pid, "/", pid, "_task-4_faces1_30.mp3"))
# print(task)
# print(paste0("participant: ", pid, " has a record of: ", length(task@left)/task@samp.rate))
t <- data.frame(te_id = pid, value = as.numeric(task@left), sample = c(1:length(as.numeric(task@left))))
hist(t$value, breaks = 100)
i=3
# for(i in 1:nrow(p.of.int)) {
pid <- p.of.int$ID[i]
task <- readWave(paste0(project.dir, "/data/derivatives/PS-VC_participants-response/",
pid, "/", pid, "_task-4_faces1_30.mp3"))
# print(task)
# print(paste0("participant: ", pid, " has a record of: ", length(task@left)/task@samp.rate))
t <- data.frame(te_id = pid, value = as.numeric(task@left), sample = c(1:length(as.numeric(task@left))))
hist(t$value, breaks = 100)
i=1
# for(i in 1:nrow(p.of.int)) {
pid <- p.of.int$ID[i]
task <- readWave(paste0(project.dir, "/data/derivatives/PS-VC_participants-response/",
pid, "/", pid, "_task-1_alone_9.mp3"))
# pid, "/", pid, "_task-4_faces1_30.mp3"))
# print(task)
# print(paste0("participant: ", pid, " has a record of: ", length(task@left)/task@samp.rate))
t <- data.frame(te_id = pid, value = as.numeric(task@left), sample = c(1:length(as.numeric(task@left))))
hist(t$value, breaks = 100)
i=2
# for(i in 1:nrow(p.of.int)) {
pid <- p.of.int$ID[i]
task <- readWave(paste0(project.dir, "/data/derivatives/PS-VC_participants-response/",
pid, "/", pid, "_task-1_alone_9.mp3"))
# pid, "/", pid, "_task-4_faces1_30.mp3"))
# print(task)
# print(paste0("participant: ", pid, " has a record of: ", length(task@left)/task@samp.rate))
t <- data.frame(te_id = pid, value = as.numeric(task@left), sample = c(1:length(as.numeric(task@left))))
hist(t$value, breaks = 100)
i=3
# for(i in 1:nrow(p.of.int)) {
pid <- p.of.int$ID[i]
task <- readWave(paste0(project.dir, "/data/derivatives/PS-VC_participants-response/",
pid, "/", pid, "_task-1_alone_9.mp3"))
# pid, "/", pid, "_task-4_faces1_30.mp3"))
# print(task)
# print(paste0("participant: ", pid, " has a record of: ", length(task@left)/task@samp.rate))
t <- data.frame(te_id = pid, value = as.numeric(task@left), sample = c(1:length(as.numeric(task@left))))
hist(t$value, breaks = 100)
################################################################################
#  read the PS_VC task metadata
ps.vc.metadata.r <- read_csv("data/derivatives/PS_VC-task-metadata.csv")
ps.vc.metadata <- ps.vc.metadata.r %>%
mutate(start_in_sec = start_in_sec - ps.vc.metadata.r$start_in_sec[1],
end_in_sec = end_in_sec - ps.vc.metadata.r$start_in_sec[1]) %>%
select(task_num, word, start_in_sec, end_in_sec)
# keep participants of interest
participants.metadata <- read_csv("data/derivatives/PS_VC-participants-metadata.csv")
p.of.int <- participants.metadata %>%
filter(work_on == T) %>%
mutate(start = as.numeric(sub("^\\d{2}:(\\d{2}):\\d{2}$", "\\1", first_beep)),
duration_m = as.numeric(sub("^([^:]+).*", "\\1", duration)),
duration_s = as.numeric(sub("^\\d{2}:(\\d{2}):\\d{2}$", "\\1", duration)),
duration_in_sec = (60*duration_m)+duration_s) %>%
select(ID, starts_with("duration"), start, audio, video, `all tasks completed`)
################################################################################
# read tests data
nih.tb <- read_csv("data/derivatives/nih-tb_clean_111523.csv")
iq <- read_csv("data/derivatives/wisc-and-wais_clean_111523.csv")
################################################################################
# check correlation between NIH-TB and IQ
m1 <- nih.tb %>%
select(dev_id,
ends_with("age_corrected_standard_score"))
m2 <- iq %>%
select(dev_id, `2e_id`,
ends_with("composite_score"),FSIQ,
SI, VC, BD, VP, MR, FW, DS, PS, CD, SS, IN, AR)
m1.m2 <- inner_join(m1, m2) %>%
mutate(`2e_id`=ifelse(is.na(`2e_id`), dev_id, `2e_id`)) %>%
rename(te_id = `2e_id`)
corr.table(m1.m2 %>% select(any_of(colnames(m1)), - ends_with("_id")),
m1.m2 %>% select(any_of(colnames(m2)), - ends_with("_id"))) %>%
filter(V1 %in% colnames(m1),
V2 %in% colnames(m2)) %>%
mutate(V1 = sub("_age_corrected_standard_score", "", V1),
V2 = sub("_composite_score", "", V2)) %>%
ggplot(aes(x=V1, y=V2, fill = r, label = ifelse(pval<0.05, "*","")))+
geom_tile()+
geom_text(size = 3)+
scale_fill_gradient2(low = redblack.col[2], high = redblack.col[1]) +
labs(y = "IQ", x = "NIH_TB") +
my.guides
################################################################################
#                     processing audio files from PS verbal screen             #
################################################################################
rm(list = ls())
gc()
source("/Dedicated/jmichaelson-wdata/msmuhammad/msmuhammad-source.R")
library(tuneR)
################################################################################
################################################################################
project.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/RPOE/language"
setwd(project.dir)
################################################################################
#  read the PS_VC task metadata
ps.vc.metadata.r <- read_csv("data/derivatives/PS_VC-task-metadata.csv")
ps.vc.metadata <- ps.vc.metadata.r %>%
mutate(start_in_sec = start_in_sec - ps.vc.metadata.r$start_in_sec[1],
end_in_sec = end_in_sec - ps.vc.metadata.r$start_in_sec[1]) %>%
select(task_num, word, start_in_sec, end_in_sec)
# keep participants of interest
participants.metadata <- read_csv("data/derivatives/PS_VC-participants-metadata.csv")
p.of.int <- participants.metadata %>%
filter(work_on == T) %>%
mutate(start = as.numeric(sub("^\\d{2}:(\\d{2}):\\d{2}$", "\\1", first_beep)),
duration_m = as.numeric(sub("^([^:]+).*", "\\1", duration)),
duration_s = as.numeric(sub("^\\d{2}:(\\d{2}):\\d{2}$", "\\1", duration)),
duration_in_sec = (60*duration_m)+duration_s) %>%
select(ID, starts_with("duration"), start, audio, video, `all tasks completed`)
################################################################################
# trial run for getting audio features for one of the participants
data.dir <- "/Dedicated/jmichaelson-sdata/MRI/RPOE"
my.data.dir <- paste0(project.dir, "/data/raw/PS_vc")
for (i in 1:nrow(p.of.int)) {
# i = 2
pid <- p.of.int$ID[i]
raw.a.file <- gsub(" ", fixed = T, "\\ ",
list.files(paste0(data.dir, "/", pid,
"/phenotype/PS_verbal_screen"),
pattern = ".mp3", full.names = T))
a.file <- paste0(my.data.dir, "/", pid, ".mp3")
if (!file.exists(a.file) && length(raw.a.file) == 0) {
v.file <- gsub(" ", fixed = T, "\\ ",
list.files(paste0(data.dir, "/", pid, "/phenotype/PS_verbal_screen"),
full.names = T, pattern = ".mp4")[1])
system(paste0("ffmpeg -i ", v.file,
" -ar 44100 -ac 2 ",
my.data.dir, "/", pid, ".mp3"))
a.file <- paste0(my.data.dir, "/", pid, ".mp3")
}else if(!file.exists(a.file)) {
system(str_c("cp ", raw.a.file," ", a.file))
}
aud <- readMP3(a.file)
aud.cropped <- extractWave(aud, xunit = "time",
from = p.of.int$start[i],
to = p.of.int$duration_in_sec)
# save full task response
system(paste0("mkdir -p ", project.dir,
"/data/derivatives/PS-VC_participants-response/",
pid))
# seewave::savewav(wave = aud.cropped, f = 44100, channel = "left",
#                  filename = paste0(project.dir,
#                                    "/data/derivatives/PS-VC_participants-response/",
#                                    pid, "/", "full-PS_VC-cropped_",pid, ".mp3"))
writeWave(Wave(left = as.numeric(aud.cropped@left),
samp.rate = 44100,
bit = 16,
pcm=T),
filename = paste0(project.dir,
"/data/derivatives/PS-VC_participants-response/",
pid, "/", "full-PS_VC-cropped_",pid, ".mp3"),
extensible = T)
# get responses cropped
for (j in 1:nrow(ps.vc.metadata)) {
# j = 1
# o.task.start <- p.of.int$start[i]+ps.vc.metadata$start_in_sec[j]
# o.task.end <- p.of.int$duration_in_sec[i]+ps.vc.metadata$end_in_sec[j]
task <- paste0(pid,
"_task-", ps.vc.metadata$task_num[j],
"_", ps.vc.metadata$word[j], "_", j)
t.aud <- extractWave(aud.cropped,
from = ps.vc.metadata$start_in_sec[j],
to = ps.vc.metadata$end_in_sec[j],
xunit = "time")
plot(t.aud)
# play(t.aud, "play")
# saving the task output
# seewave::savewav(wave = t.aud,  f = 44100, channel = "left",
#                  filename = paste0(project.dir,
#                                    "/data/derivatives/PS-VC_participants-response/",
#                                    pid, "/", task, ".mp3"))
writeWave(Wave(left = as.numeric(t.aud@left),
samp.rate = 44100,
bit = 16,
pcm=T),
filename = paste0(project.dir,
"/data/derivatives/PS-VC_participants-response/",
pid, "/", task, ".wav"),
extensible = T)
}
}
