mutate(cat2 = ifelse(grepl("NIH", x), "NIH-TB", "IQ")) %>%
mutate(x = sub("_NIH", "", x)) %>%
ggplot(aes(y=var2, x =Estimate, alpha = sig), color = six.colors[1]) +
geom_point(position = position_dodge(width = 0.6), size =1) +
geom_vline(xintercept = 0, linetype = "dashed", size = 0.2, color = "black") +
scale_alpha_manual(values = c(1, 0.5)) +
# scale_shape_manual(values = c(1, 2)) +
geom_errorbarh(aes(xmin = confint_min, xmax = confint_max),
size = 0.8, height = 0, show.legend = F,
position = position_dodge(width = 0.6)) +
scale_color_manual(values = six.colors[1])  +
ggh4x::facet_grid2(cols = vars(reorder(x, desc(cat2))), scales = "free_x") +
labs(y="",
caption = paste0("the estimates are derived from this lm formula:", "\n",
"   lmer(y ~ x + age + sex + age*sex + (1|task_num) + (1|te_id))", "\n",
"   where y is a variable from surfboard output, and x is one of the IQ/NIH-TB measures"))
coeff %>%
mutate(x = sub("_age_corrected_standard_score", "_NIH", var1),
sig = ifelse(pval < 0.05, "pval < 0.05", "pval >= 0.05")) %>%
mutate(cat2 = ifelse(grepl("NIH", x), "NIH-TB", "IQ")) %>%
mutate(x = sub("_NIH", "", x)) %>%
ggplot(aes(y=var2, x =Estimate, alpha = sig), color = six.colors[1]) +
geom_point(position = position_dodge(width = 0.6), size =1) +
geom_vline(xintercept = 0, linetype = "dashed", size = 0.2) +
scale_alpha_manual(values = c(1, 0.5)) +
# scale_shape_manual(values = c(1, 2)) +
geom_errorbarh(aes(xmin = confint_min, xmax = confint_max),
size = 0.8, height = 0, show.legend = F,
position = position_dodge(width = 0.6)) +
scale_color_manual(values = six.colors[1])  +
ggh4x::facet_grid2(cols = vars(reorder(x, desc(cat2))), scales = "free_x") +
labs(y="",
caption = paste0("the estimates are derived from this lm formula:", "\n",
"   lmer(y ~ x + age + sex + age*sex + (1|task_num) + (1|te_id))", "\n",
"   where y is a variable from surfboard output, and x is one of the IQ/NIH-TB measures"))
coeff %>%
mutate(x = sub("_age_corrected_standard_score", "_NIH", var1),
sig = ifelse(pval < 0.05, "pval < 0.05", "pval >= 0.05")) %>%
mutate(cat2 = ifelse(grepl("NIH", x), "NIH-TB", "IQ")) %>%
mutate(x = sub("_NIH", "", x)) %>%
ggplot(aes(y=var2, x =Estimate, alpha = sig, color = six.colors[1])) +
geom_point(position = position_dodge(width = 0.6), size =1) +
geom_vline(xintercept = 0, linetype = "dashed", size = 0.2) +
scale_alpha_manual(values = c(1, 0.5)) +
# scale_shape_manual(values = c(1, 2)) +
geom_errorbarh(aes(xmin = confint_min, xmax = confint_max),
size = 0.8, height = 0, show.legend = F,
position = position_dodge(width = 0.6)) +
# scale_color_manual(values = six.colors[1])  +
ggh4x::facet_grid2(cols = vars(reorder(x, desc(cat2))), scales = "free_x") +
labs(y="",
caption = paste0("the estimates are derived from this lm formula:", "\n",
"   lmer(y ~ x + age + sex + age*sex + (1|task_num) + (1|te_id))", "\n",
"   where y is a variable from surfboard output, and x is one of the IQ/NIH-TB measures"))
coeff %>%
mutate(x = sub("_age_corrected_standard_score", "_NIH", var1),
sig = ifelse(pval < 0.05, "pval < 0.05", "pval >= 0.05")) %>%
mutate(cat2 = ifelse(grepl("NIH", x), "NIH-TB", "IQ")) %>%
mutate(x = sub("_NIH", "", x)) %>%
ggplot(aes(y=var2, x =Estimate, alpha = sig), color = six.colors[1]) +
geom_point(position = position_dodge(width = 0.6), size =1) +
geom_vline(xintercept = 0, linetype = "dashed", size = 0.2) +
scale_alpha_manual(values = c(1, 0.5)) +
# scale_shape_manual(values = c(1, 2)) +
geom_errorbarh(aes(xmin = confint_min, xmax = confint_max),
size = 0.8, height = 0, show.legend = F,
position = position_dodge(width = 0.6)) +
# scale_color_manual(values = six.colors[1])  +
ggh4x::facet_grid2(cols = vars(reorder(x, desc(cat2))), scales = "free_x") +
labs(y="",
caption = paste0("the estimates are derived from this lm formula:", "\n",
"   lmer(y ~ x + age + sex + age*sex + (1|task_num) + (1|te_id))", "\n",
"   where y is a variable from surfboard output, and x is one of the IQ/NIH-TB measures"))
coeff %>%
mutate(x = sub("_age_corrected_standard_score", "_NIH", var1),
sig = ifelse(pval < 0.05, "pval < 0.05", "pval >= 0.05")) %>%
mutate(cat2 = ifelse(grepl("NIH", x), "NIH-TB", "IQ")) %>%
mutate(x = sub("_NIH", "", x)) %>%
ggplot(aes(y=var2, x =Estimate, alpha = sig), color = six.colors[1]) +
geom_point(position = position_dodge(width = 0.6), size =1) +
geom_vline(xintercept = 0, linetype = "dashed", size = 0.2) +
scale_alpha_manual(values = c(1, 0.5)) +
# scale_shape_manual(values = c(1, 2)) +
geom_errorbarh(aes(xmin = confint_min, xmax = confint_max),
size = 0.8, height = 0, show.legend = F,
position = position_dodge(width = 0.6)) +
scale_color_manual(values = six.colors[1])  +
ggh4x::facet_grid2(cols = vars(reorder(x, desc(cat2))), scales = "free_x") +
labs(y="",
caption = paste0("the estimates are derived from this lm formula:", "\n",
"   lmer(y ~ x + age + sex + age*sex + (1|task_num) + (1|te_id))", "\n",
"   where y is a variable from surfboard output, and x is one of the IQ/NIH-TB measures"))
coeff %>%
mutate(x = sub("_age_corrected_standard_score", "_NIH", var1),
sig = ifelse(pval < 0.05, "pval < 0.05", "pval >= 0.05")) %>%
mutate(cat2 = ifelse(grepl("NIH", x), "NIH-TB", "IQ")) %>%
mutate(x = sub("_NIH", "", x)) %>%
ggplot(aes(y=var2, x =Estimate, alpha = sig), color = six.colors[1]) +
geom_point(position = position_dodge(width = 0.6), size =1) +
geom_vline(xintercept = 0, linetype = "dashed", size = 0.2) +
scale_alpha_manual(values = c(1, 0.5)) +
# scale_shape_manual(values = c(1, 2)) +
geom_errorbarh(aes(xmin = confint_min, xmax = confint_max),
size = 0.8, height = 0, show.legend = F,
position = position_dodge(width = 0.6)) +
scale_color_manual(values = six.colors[1])  +
ggh4x::facet_grid2(cols = vars(reorder(x, desc(cat2))), scales = "free_x") +
labs(y="",
caption = paste0("the estimates are derived from this lm formula:", "\n",
"   glm(y ~ all_words", "\n",
"   where y is a variable from the IQ/NIH-TB measures"))
################################################################################
#                       correlate fMRI log data and IQ tests                   #
################################################################################
rm(list = ls())
gc()
source("/Dedicated/jmichaelson-wdata/msmuhammad/msmuhammad-source.R")
################################################################################
################################################################################
project.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/RPOE/mri"
setwd(project.dir)
################################################################################
# read fmri processed data
p.list <- list.dirs("/Dedicated/jmichaelson-sdata/MRI/RPOE", recursive = F)
registerDoMC(cores = 4)
mri.meta <- foreach (i = 1:(length(p.list)-1), .combine = rbind) %dopar% {
f.path <- p.list[i]
pid <- sub("/Dedicated/jmichaelson-sdata/MRI/RPOE/", "", f.path)
f.path2 <- paste0(project.dir, "/data/derivatives/MRI-log/mdata/", pid, "_mdata.tsv")
if (file.exists(f.path2)) {
t <- read_tsv(f.path2) %>%
mutate(te_id = pid) %>%
mutate(keypress = readr::parse_number(keypress)) %>%
mutate(hand = ifelse(keypress %in% c(6:9), "R",
ifelse(keypress %in% c(1:5), "L", NA))) %>%
mutate(converted_keypress = ifelse(hand == "L",
keypress+5, keypress)) %>%
mutate(keypress_rel_time = ifelse(keypress_rel_time>0, keypress_rel_time, NA))
return(t)
}else {
return(NULL)
}
}
task.template <- mri.meta %>%
mutate(correct_answer = ifelse(exp_condition == "same", 7,
ifelse(exp_condition == "diff", 8,
ifelse(exp_condition == "coherent", 7,
ifelse(exp_condition == "incoherent", 8,
NA))))) %>%
select(task, exp_condition, specific, file, duration, correct_answer) %>%
slice_head(n=209)
task.total <- task.template %>%
group_by(task, exp_condition) %>%
dplyr::summarise(task_total = n())
View(mri.meta)
################################################################################
# how many were correct per participant
p.scores <- mri.meta %>%
left_join(task.template) %>%
distinct() %>%
filter(!is.na(correct_answer)) %>%
select(te_id, task, exp_condition, category,file, converted_keypress, correct_answer) %>%
mutate(answered_correctly = ifelse(is.na(converted_keypress), F,
ifelse(converted_keypress == correct_answer, T, F)),
exp_condition = paste0(exp_condition, "_", category)) %>%
group_by(te_id, task, exp_condition) %>%
dplyr::summarise(total = sum(answered_correctly)) %>%
left_join(task.total, relationship = "many-to-many") %>%
mutate(task_exp = paste0(task, "_",exp_condition, "_score")) %>%
pivot_wider(names_from = task_exp, values_from = total, id_cols = te_id) %>% ungroup()
View(p.scores)
View(task.total)
task.total <- task.template %>%
group_by(task, exp_condition, category) %>%
dplyr::summarise(task_total = n())
task.template <- mri.meta %>%
mutate(correct_answer = ifelse(exp_condition == "same", 7,
ifelse(exp_condition == "diff", 8,
ifelse(exp_condition == "coherent", 7,
ifelse(exp_condition == "incoherent", 8,
NA))))) %>%
select(task, exp_condition, category, specific, file, duration, correct_answer) %>%
slice_head(n=209)
task.total <- task.template %>%
group_by(task, exp_condition, category) %>%
dplyr::summarise(task_total = n())
task.total <- task.template %>%
mutate(category = ifelse(exp_condition == "semantic_coherence", NA, category)) %>%
group_by(task, exp_condition, category) %>%
dplyr::summarise(task_total = n())
task.total <- task.template %>%
mutate(category = ifelse(task == "semantic_coherence", NA, category)) %>%
group_by(task, exp_condition, category) %>%
dplyr::summarise(task_total = n())
# get the relative time needed to define coh/non-coh and same/diff for the ones answered
p.scores.t <- mri.meta %>%
filter(task %in% c("PS_samediff", "semantic_coherence")) %>%
mutate(abs_keypress_t = keypress_rel_time - rel_time,
exp_condition = paste0(exp_condition, "_", category)) %>%
select(te_id, task, exp_condition, abs_keypress_t) %>%
drop_na() %>%
group_by(te_id, task, exp_condition) %>%
dplyr::summarise(avg_time_for_same_coh = mean(abs_keypress_t)) %>%
mutate(task_2 = paste0(task, "_", exp_condition, "_avg_t")) %>%
pivot_wider(names_from = task_2, values_from = avg_time_for_same_coh, id_cols = "te_id")
################################################################################
# how many words were thought of
word.count <- mri.meta %>%
filter(task == "word_association", exp_condition == "word") %>%
mutate(count = ifelse(is.na(count), 0, count)) %>%
group_by(te_id) %>%
dplyr::summarise(total_word_association_words = sum(count))
################################################################################
# get the relative time or how long it takes them to read the number in mind
number.presses <- mri.meta %>%
filter(task == "word_association", exp_condition == "number") %>%
mutate(press = ifelse(is.na(keypress), F, T)) %>%
select(te_id, press) %>%
group_by(te_id) %>%
dplyr::summarise(total_number_press = sum(press))
number.presses.time <- mri.meta %>%
filter(task == "word_association", exp_condition == "number") %>%
mutate(abs_keypress_t = keypress_rel_time - rel_time) %>%
select(te_id, abs_keypress_t) %>%
drop_na() %>%
group_by(te_id) %>%
dplyr::summarise(avg_number_keypress_abs_t = mean(abs_keypress_t, na.omit = T))
################################################################################
# read tests data
nih.tb <- read_csv("../language/data/derivatives/nih-tb_clean.csv")
iq <- read_csv("../language/data/derivatives/wisc-and-wais_clean.csv")
################################################################################
# clean NIH-TB and IQ
m1 <- nih.tb %>%
select(dev_id,
ends_with("age_corrected_standard_score")) %>%
drop_na()
m2 <- iq %>%
select(dev_id, te_id,
paste0(c("PSI", "WM", "VCI"), "_composite_score"),
# ends_with("composite_score"),
FSIQ,
SI, VC, BD, VP, MR,
#FW, PS, IN, AR,
DS, CD, SS) %>%
mutate(VCI_PSI = VCI_composite_score - PSI_composite_score,
abs_VCI_PSI = abs(VCI_composite_score - PSI_composite_score))
m1.m2 <- inner_join(m1, m2) %>%
mutate(te_id=ifelse(is.na(te_id), dev_id, te_id)) %>%
rename(te_id = te_id)
################################################################################
# correlation between fmri scores and iq/nih
m123 <- inner_join(inner_join(p.scores, p.scores.t),
inner_join(m1.m2, inner_join(word.count,
inner_join(number.presses, number.presses.time))))
corr.table(m123 %>% select(colnames(m1.m2), -te_id, -dev_id),
m123 %>% select(-colnames(m1.m2))) %>%
filter(V1 %in% colnames(m1.m2), !V2 %in% colnames(m1.m2)) %>%
mutate(V1 = sub("_age_corrected_standard_score", "_NIH", V1)) %>%
mutate(V1 = factor(V1, levels = unique(V1)),
V2 = factor(V2, levels = unique(V2))) %>%
mutate(cat2 = ifelse(grepl("NIH", V1), "NIH-TB", "IQ")) %>%
mutate(V1 = sub("_NIH", "", V1),
V1 = factor(V1, levels = unique(V1))) %>%
mutate(cat1 = ifelse(V2 %in% c(colnames(number.presses), colnames(word.count), colnames(p.scores)), "total",
ifelse(V2 %in% c(colnames(number.presses.time), colnames(p.scores.t)), "time", "other"))) %>%
ggplot(aes(x=V1, y=V2, fill=r, label=ifelse(pval<0.05, "*", ""))) +
geom_tile() +
geom_text(size=3, color = "white") +
ggh4x::facet_grid2(cols = vars(cat2), rows = vars(cat1), scales = "free", space = "free") +
redblack.col.gradient + my.guides + null_labs +
labs(caption = paste0("n(samples): ", nrow(m123)))
################################################################################
# how many were correct per participant
p.scores <- mri.meta %>%
left_join(task.template) %>%
distinct() %>%
filter(!is.na(correct_answer)) %>%
select(te_id, task, exp_condition, category,file, converted_keypress, correct_answer) %>%
mutate(answered_correctly = ifelse(is.na(converted_keypress), F,
ifelse(converted_keypress == correct_answer, T, F)),
exp_condition = paste0(exp_condition, "_", category)) %>%
group_by(te_id, task, exp_condition) %>%
dplyr::summarise(total = sum(answered_correctly)) %>%
left_join(task.total, relationship = "many-to-many") %>%
mutate(task_exp = paste0(task, "_",exp_condition, "_score")) %>%
pivot_wider(names_from = task_exp, values_from = total, id_cols = te_id) %>% ungroup()
View(p.scores)
View(task.template)
View(mri.meta)
p.scores <- mri.meta %>%
left_join(task.template) %>%
distinct() %>%
filter(!is.na(correct_answer)) %>%
select(te_id, task, exp_condition, category,file, converted_keypress, correct_answer) %>%
mutate(answered_correctly = ifelse(is.na(converted_keypress), F,
ifelse(converted_keypress == correct_answer, T, F)),
exp_condition = paste0(exp_condition, "_", category))
################################################################################
# how many were correct per participant
p.scores <- mri.meta %>%
left_join(task.template) %>%
distinct() %>%
filter(!is.na(correct_answer)) %>%
select(te_id, task, exp_condition, category,file, converted_keypress, correct_answer) %>%
mutate(answered_correctly = ifelse(is.na(converted_keypress), F,
ifelse(converted_keypress == correct_answer, T, F)),
category = ifelse(task == "semantic_coherence", NA, category),
exp_condition = paste0(exp_condition, "_", category)) %>%
group_by(te_id, task, exp_condition) %>%
dplyr::summarise(total = sum(answered_correctly)) %>%
left_join(task.total, relationship = "many-to-many") %>%
mutate(task_exp = paste0(task, "_",exp_condition, "_score")) %>%
pivot_wider(names_from = task_exp, values_from = total, id_cols = te_id) %>% ungroup()
View(p.scores)
# get the relative time needed to define coh/non-coh and same/diff for the ones answered
p.scores.t <- mri.meta %>%
filter(task %in% c("PS_samediff", "semantic_coherence")) %>%
mutate(abs_keypress_t = keypress_rel_time - rel_time,
category = ifelse(task == "semantic_coherence", NA, category),
exp_condition = paste0(exp_condition, "_", category)) %>%
select(te_id, task, exp_condition, abs_keypress_t) %>%
drop_na() %>%
group_by(te_id, task, exp_condition) %>%
dplyr::summarise(avg_time_for_same_coh = mean(abs_keypress_t)) %>%
mutate(task_2 = paste0(task, "_", exp_condition, "_avg_t")) %>%
pivot_wider(names_from = task_2, values_from = avg_time_for_same_coh, id_cols = "te_id")
################################################################################
# how many words were thought of
word.count <- mri.meta %>%
filter(task == "word_association", exp_condition == "word") %>%
mutate(count = ifelse(is.na(count), 0, count)) %>%
group_by(te_id) %>%
dplyr::summarise(total_word_association_words = sum(count))
################################################################################
# get the relative time or how long it takes them to read the number in mind
number.presses <- mri.meta %>%
filter(task == "word_association", exp_condition == "number") %>%
mutate(press = ifelse(is.na(keypress), F, T)) %>%
select(te_id, press) %>%
group_by(te_id) %>%
dplyr::summarise(total_number_press = sum(press))
number.presses.time <- mri.meta %>%
filter(task == "word_association", exp_condition == "number") %>%
mutate(abs_keypress_t = keypress_rel_time - rel_time) %>%
select(te_id, abs_keypress_t) %>%
drop_na() %>%
group_by(te_id) %>%
dplyr::summarise(avg_number_keypress_abs_t = mean(abs_keypress_t, na.omit = T))
################################################################################
# read tests data
nih.tb <- read_csv("../language/data/derivatives/nih-tb_clean.csv")
iq <- read_csv("../language/data/derivatives/wisc-and-wais_clean.csv")
################################################################################
# clean NIH-TB and IQ
m1 <- nih.tb %>%
select(dev_id,
ends_with("age_corrected_standard_score")) %>%
drop_na()
m2 <- iq %>%
select(dev_id, te_id,
paste0(c("PSI", "WM", "VCI"), "_composite_score"),
# ends_with("composite_score"),
FSIQ,
SI, VC, BD, VP, MR,
#FW, PS, IN, AR,
DS, CD, SS) %>%
mutate(VCI_PSI = VCI_composite_score - PSI_composite_score,
abs_VCI_PSI = abs(VCI_composite_score - PSI_composite_score))
m1.m2 <- inner_join(m1, m2) %>%
mutate(te_id=ifelse(is.na(te_id), dev_id, te_id)) %>%
rename(te_id = te_id)
################################################################################
# correlation between fmri scores and iq/nih
m123 <- inner_join(inner_join(p.scores, p.scores.t),
inner_join(m1.m2, inner_join(word.count,
inner_join(number.presses, number.presses.time))))
corr.table(m123 %>% select(colnames(m1.m2), -te_id, -dev_id),
m123 %>% select(-colnames(m1.m2))) %>%
filter(V1 %in% colnames(m1.m2), !V2 %in% colnames(m1.m2)) %>%
mutate(V1 = sub("_age_corrected_standard_score", "_NIH", V1)) %>%
mutate(V1 = factor(V1, levels = unique(V1)),
V2 = factor(V2, levels = unique(V2))) %>%
mutate(cat2 = ifelse(grepl("NIH", V1), "NIH-TB", "IQ")) %>%
mutate(V1 = sub("_NIH", "", V1),
V1 = factor(V1, levels = unique(V1))) %>%
mutate(cat1 = ifelse(V2 %in% c(colnames(number.presses), colnames(word.count), colnames(p.scores)), "total",
ifelse(V2 %in% c(colnames(number.presses.time), colnames(p.scores.t)), "time", "other"))) %>%
ggplot(aes(x=V1, y=V2, fill=r, label=ifelse(pval<0.05, "*", ""))) +
geom_tile() +
geom_text(size=3, color = "white") +
ggh4x::facet_grid2(cols = vars(cat2), rows = vars(cat1), scales = "free", space = "free") +
redblack.col.gradient + my.guides + null_labs +
labs(caption = paste0("n(samples): ", nrow(m123)))
ggsave(filename = "figs/correlation-between-fmri-scores-and-data-with-nih-iq.png",
width = 10, height = 8, units = "in", dpi = 320, bg = "white")
################################################################################
# clean NIH-TB and IQ
m1 <- nih.tb %>%
select(dev_id,
ends_with("age_corrected_standard_score")) %>%
drop_na() %>%
mutate(PV_PS_age_corrected_standard_score = PV_age_corrected_standard_score - pattern_age_corrected_standard_score)
m2 <- iq %>%
select(dev_id, te_id,
paste0(c("PSI", "WM", "VCI"), "_composite_score"),
# ends_with("composite_score"),
FSIQ,
SI, VC, BD, VP, MR,
#FW, PS, IN, AR,
DS, CD, SS) %>%
mutate(VCI_PSI = VCI_composite_score - PSI_composite_score,
abs_VCI_PSI = abs(VCI_composite_score - PSI_composite_score))
m1.m2 <- inner_join(m1, m2) %>%
mutate(te_id=ifelse(is.na(te_id), dev_id, te_id)) %>%
rename(te_id = te_id)
################################################################################
# correlation between fmri scores and iq/nih
m123 <- inner_join(inner_join(p.scores, p.scores.t),
inner_join(m1.m2, inner_join(word.count,
inner_join(number.presses, number.presses.time))))
corr.table(m123 %>% select(colnames(m1.m2), -te_id, -dev_id),
m123 %>% select(-colnames(m1.m2))) %>%
filter(V1 %in% colnames(m1.m2), !V2 %in% colnames(m1.m2)) %>%
mutate(V1 = sub("_age_corrected_standard_score", "_NIH", V1)) %>%
mutate(V1 = factor(V1, levels = unique(V1)),
V2 = factor(V2, levels = unique(V2))) %>%
mutate(cat2 = ifelse(grepl("NIH", V1), "NIH-TB", "IQ")) %>%
mutate(V1 = sub("_NIH", "", V1),
V1 = factor(V1, levels = unique(V1))) %>%
mutate(cat1 = ifelse(V2 %in% c(colnames(number.presses), colnames(word.count), colnames(p.scores)), "total",
ifelse(V2 %in% c(colnames(number.presses.time), colnames(p.scores.t)), "time", "other"))) %>%
ggplot(aes(x=V1, y=V2, fill=r, label=ifelse(pval<0.05, "*", ""))) +
geom_tile() +
geom_text(size=3, color = "white") +
ggh4x::facet_grid2(cols = vars(cat2), rows = vars(cat1), scales = "free", space = "free") +
redblack.col.gradient + my.guides + null_labs +
labs(caption = paste0("n(samples): ", nrow(m123)))
ggsave(filename = "figs/correlation-between-fmri-scores-and-data-with-nih-iq.png",
width = 10, height = 8, units = "in", dpi = 320, bg = "white")
task.template <- mri.meta %>%
mutate(correct_answer = ifelse(exp_condition == "same", 7,
ifelse(exp_condition == "diff", 8,
ifelse(exp_condition == "coherent", 7,
ifelse(exp_condition == "incoherent", 8,
NA))))) %>%
select(task, exp_condition, category, specific, file, duration, correct_answer) %>%
slice_head(n=209)
task.total <- task.template %>%
mutate(category = ifelse(task == "semantic_coherence", NA, category)) %>%
group_by(task, exp_condition, category) %>%
dplyr::summarise(task_total = n())
################################################################################
#                         extract facial landmarks and features                #
################################################################################
rm(list = ls())
gc()
################################################################################
################################################################################
project.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/RPOE/photographs/"
setwd(project.dir)
################################################################################
# keep participants of interest
participants.metadata <- readxl::read_xlsx("../language/data/raw/RPOE_participants_metadata.xlsx", sheet = 1) %>%
drop_na(sex, te_id)
# check if the participants have face photographs taken
registerDoMC(cores = 3)
files.meta <- foreach(i=1:nrow(participants.metadata), .combine = rbind) %dopar% {
p <- participants.metadata$te_id[i]
df <- data.frame(file = list.files(paste0("/Dedicated/jmichaelson-sdata/MRI/RPOE/", p, "/phenotype/photographs"),
pattern = "face", full.names = T)) %>%
mutate(te_id = p,
new_path = paste0(project.dir,
"/data/raw/face_", te_id, ".jpg"))
if (nrow(df)>0) {
cmd <- paste0("cp ", df$file[1], " ", df$new_path)
system(cmd)
}
return(df)
}
# check if the participants have face photographs taken
registerDoMC(cores = 3)
files.meta <- foreach(i=1:nrow(participants.metadata), .combine = rbind) %dopar% {
p <- participants.metadata$te_id[i]
df <- data.frame(file = list.files(paste0("/Dedicated/jmichaelson-sdata/MRI/RPOE/", p, "/phenotype/photographs"),
pattern = "face", full.names = T)) %>%
mutate(te_id = p,
new_path = paste0(project.dir,
"/data/raw/face_", te_id, ".jpg"))
if (nrow(df)>0) {
cmd <- paste0("cp ", df$file[1], " ", df$new_path)
# system(cmd)
print(cmd)
}
return(df)
}
View(files.meta)
# files.meta <- foreach(i=1:nrow(participants.metadata), .combine = rbind) %dopar% {
for(i in 1:nrow(participants.metadata)) {
p <- participants.metadata$te_id[i]
df <- data.frame(file = list.files(paste0("/Dedicated/jmichaelson-sdata/MRI/RPOE/", p, "/phenotype/photographs"),
pattern = "face", full.names = T)) %>%
mutate(te_id = p,
new_path = paste0(project.dir,
"/data/raw/face_", te_id, ".jpg"))
if (nrow(df)>0) {
cmd <- paste0("cp ", df$file[1], " ", df$new_path)
# system(cmd)
print(cmd)
}
# return(df)
}
